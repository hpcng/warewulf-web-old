"use strict";(self.webpackChunkwarewulf=self.webpackChunkwarewulf||[]).push([[705],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=o,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||r;return t?i.createElement(h,a(a({ref:n},u),{},{components:t})):i.createElement(h,a({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<r;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6561:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var i=t(7462),o=t(3366),r=(t(7294),t(3905)),a=["components"],s={id:"containers",title:"Container Management"},l={unversionedId:"enchiridion/containers",id:"enchiridion/containers",isDocsHomePage:!1,title:"Container Management",description:'Since the inception of Warewulf over 20 years ago, Warewulf has used the model of the "Virtual Node File System" (VNFS) as a template image for the compute nodes. This is similar to a golden master image, except that the node file system exists within a directory on the Warewulf control node (e.g. a chroot()).',source:"@site/docs/enchiridion/containers.md",sourceDirName:"enchiridion",slug:"/enchiridion/containers",permalink:"/docs/enchiridion/containers",editUrl:"https://github.com/hpcng/warewulf-web-old/edit/main/docs/enchiridion/containers.md",version:"current",frontMatter:{id:"containers",title:"Container Management"},sidebar:"someSidebar",previous:{title:"Warewulf Initialization",permalink:"/docs/enchiridion/initialization"},next:{title:"Kernel Management",permalink:"/docs/enchiridion/kernel"}},c=[{value:"Container Tools",id:"container-tools",children:[]},{value:"Importing From A Registry",id:"importing-from-a-registry",children:[{value:"Private Registry",id:"private-registry",children:[]}]},{value:"Listing All Imported Containers",id:"listing-all-imported-containers",children:[]},{value:"Making Changes To Containers",id:"making-changes-to-containers",children:[]},{value:"Creating Containers From Scratch",id:"creating-containers-from-scratch",children:[{value:"Building A Container From Your Host",id:"building-a-container-from-your-host",children:[]},{value:"Building A Container Using Singularity",id:"building-a-container-using-singularity",children:[]}]}],u={toc:c};function d(e){var n=e.components,t=(0,o.Z)(e,a);return(0,r.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'Since the inception of Warewulf over 20 years ago, Warewulf has used the model of the "Virtual Node File System" (VNFS) as a template image for the compute nodes. This is similar to a golden master image, except that the node file system exists within a directory on the Warewulf control node (e.g. a ',(0,r.kt)("inlineCode",{parentName:"p"},"chroot()"),")."),(0,r.kt)("p",null,"In hindsight, we've been using containers all along, but the buzzword just didn't exist. Over the last 5-6 years, the enterprise has created a lot of tooling and standards around defining, building, distributing, securing, and managing containers, so Warewulf (as of v4.0) now integrates directly within the container ecosystem to facilitate the process of VNFS image management."),(0,r.kt)("p",null,"If you are not currently leveraging the container ecosystem in any other way, you can still build your own chroot directories and use Warewulf as you always have."),(0,r.kt)("p",null,"It is important to understand that Warewulf is not running a container runtime on the nodes. While that is absolutely possible to run containers from the booted hosts, Warewulf is provisioning the container image to the bare metal and booting it. This container will be used as the base operating system and by default it will run stateless in memory. This means when you reboot the node, the node persists no information about Warewulf or how it booted."),(0,r.kt)("h2",{id:"container-tools"},"Container Tools"),(0,r.kt)("p",null,"There are different container managment tools available. Docker is probably the most recognizable one in the enterprise. Podman is another one that is gaining traction on the RHEL platforms. In HPC, Singularity is the most utilized container management tool. You can use any of these to create and manage the containers to be later imported into Warewulf."),(0,r.kt)("h2",{id:"importing-from-a-registry"},"Importing From A Registry"),(0,r.kt)("p",null,"Warewulf supports importing an image from any OCI compliant registry. This means you can import from a public registry or from a private registry."),(0,r.kt)("p",null,"Here is an example of importing from Docker Hub."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo wwctl container import docker://warewulf/rocky rocky-8\nGetting image source signatures\nCopying blob d7f16ed6f451 done  \nCopying config da2ca70704 done  \nWriting manifest to image destination\nStoring signatures\n[LOG]       info unpack layer: sha256:d7f16ed6f45129c7f4adb3773412def4ba2bf9902de42e86e77379a65d90a984\nUpdating the container's /etc/resolv.conf\nBuilding container: rocky-8\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},'IMPORTANT NOTE: Most containers in Docker Hub are not "bootable", in that, they have a limited version of Systemd to make them lighter weight for container purposes. For this reason, don\'t expect any base Docker container (e.g. ',(0,r.kt)("inlineCode",{parentName:"strong"},"docker://centos")," or ",(0,r.kt)("inlineCode",{parentName:"strong"},"docker://debian"),") to boot properly. They will not, as they will get stuck into a single user mode. The containers in ",(0,r.kt)("a",{parentName:"strong",href:"https://hub.docker.com/u/warewulf"},"https://hub.docker.com/u/warewulf")," are not limited and thus they boot as you would expect."))),(0,r.kt)("h3",{id:"private-registry"},"Private Registry"),(0,r.kt)("p",null,"It is possible to use a private registry that is password protected or does not have the requirement for TLS. In order to do so, you have two choices for handling the credentials."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set environmental variables"),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("inlineCode",{parentName:"li"},"docker login")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"podman login")," which will store the credentials locally")),(0,r.kt)("p",null,"Please note, there is no requirement to install and use docker or podman on your control node just for importing images into Warewulf."),(0,r.kt)("p",null,"Here are the environmental variables that can be used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"WAREWULF_OCI_USERNAME\nWAREWULF_OCI_PASSWORD\nWAREWULF_OCI_NOHTTPS\n")),(0,r.kt)("p",null,"Here is an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export WAREWULF_OCI_USERNAME=privateuser\nexport WAREWULF_OCI_PASSWORD=super-secret-password-or-token\n\nsudo -E wwctl import docker://ghcr.io/privatereg/rocky:8\n")),(0,r.kt)("p",null,"The above is just an example. Consideration should be done before doing it this way if you are in a security sensitive environment or shared environments. You would not want these showing up in bash history or logs."),(0,r.kt)("h2",{id:"listing-all-imported-containers"},"Listing All Imported Containers"),(0,r.kt)("p",null,"Once the container has been imported, you can list them all with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo wwctl container list\nCONTAINER NAME                      BUILT  NODES \nrocky-8                             true   0     \n")),(0,r.kt)("p",null,"Once a container has been imported and showing up in this list you can configure it to boot compute nodes."),(0,r.kt)("h2",{id:"making-changes-to-containers"},"Making Changes To Containers"),(0,r.kt)("p",null,"Warewulf has a minimal container runtime built into it. This means you can run commands inside of any of the containers and make changes to them as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo wwctl container exec rocky-8 /bin/sh\n[rocky-8] Warewulf> cat /etc/rocky-release\nRocky Linux release 8.4 (Green Obsidian)\n[rocky-8] Warewulf> exit\nRebuilding container...\n[INFO]     Skipping (VNFS is current)\n")),(0,r.kt)("p",null,"You can also ",(0,r.kt)("inlineCode",{parentName:"p"},"--bind")," directories from your host into the container when using the exec command. This works as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo wwctl container exec --bind /tmp:/mnt rocky-8 /bin/sh\n[rocky-8] Warewulf> \n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"note: As with any mount command, both the source and the target must exist. This is why the example uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"/mnt/")," directory location, as it is almost always present and empty in every Linux distribution (as prescribed by the LSB file hierarchy standard).")),(0,r.kt)("p",null,"When the command completes, if anything within the container changed, the container will be rebuilt into a bootable static object automatically."),(0,r.kt)("h2",{id:"creating-containers-from-scratch"},"Creating Containers From Scratch"),(0,r.kt)("p",null,"You can also create containers from scratch and import those containers into Warewulf as previous versions of Warewulf did."),(0,r.kt)("h3",{id:"building-a-container-from-your-host"},"Building A Container From Your Host"),(0,r.kt)("p",null,"RPM based distributions, as well as Debian variants can all bootstrap mini ",(0,r.kt)("inlineCode",{parentName:"p"},"chroot()")," directories which can then be used to bootstrap your node's container."),(0,r.kt)("p",null,"For example, on an RPM based Linux distribution with YUM or DNF, you can do something like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo yum install --installroot /tmp/newroot basesystem bash \\\n    chkconfig coreutils e2fsprogs ethtool filesystem findutils \\\n    gawk grep initscripts iproute iputils net-tools nfs-utils pam \\\n    psmisc rsync sed setup shadow-utils rsyslog tzdata util-linux \\\n    words zlib tar less gzip which util-linux openssh-clients \\\n    openssh-server dhclient pciutils vim-minimal shadow-utils \\\n    strace cronie crontabs cpio wget rocky-release ipmitool yum \\\n    NetworkManager\n")),(0,r.kt)("p",null,"You can do something similar with Debian-based distributions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get install debootstrap\nsudo debootstrap stable /tmp/newroot http://ftp.us.debian.org/debian\n")),(0,r.kt)("p",null,"Once you have created and modified your new ",(0,r.kt)("inlineCode",{parentName:"p"},"chroot()"),", you can import it into Warewulf with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo wwctl container import /tmp/newroot containername\n")),(0,r.kt)("h3",{id:"building-a-container-using-singularity"},"Building A Container Using Singularity"),(0,r.kt)("p",null,"Singularity, a container platform for HPC and performance intensive applications, can also be used to create node containers for Warewulf. There are several Singularity container recipes in the ",(0,r.kt)("inlineCode",{parentName:"p"},"containers/Singularity/")," directory and can be found on GitHub at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hpcng/warewulf/tree/main/containers/Singularity"},"https://github.com/hpcng/warewulf/tree/main/containers/Singularity"),"."),(0,r.kt)("p",null,"You can use these as starting points and adding any additional steps you want in the ",(0,r.kt)("inlineCode",{parentName:"p"},"%post")," section of the recipe file. Once you've done that, installing Singularity, building a container sandbox and importing into Warewulf can be done with the following steps:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo yum install epel-release\nsudo yum install singularity\nsudo singularity build --sandbox /tmp/newroot /path/to/Singularity/recipe.def\nsudo wwctl container import /tmp/newroot containername\n")))}d.isMDXComponent=!0}}]);